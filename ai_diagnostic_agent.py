from telegram import Update
from telegram.ext import ContextTypes
import logging
from datetime import datetime

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –ø–æ —è–∑—ã–∫–∞–º
assistant_system_prompts = {
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π": (
        "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ—Å—Ç. \n"
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –º–∞—à–∏–Ω—ã –ø–æ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—é.\n"
        "–£—Ç–æ—á–Ω—è–π —Å–∏–º–ø—Ç–æ–º—ã, –∑–∞–¥–∞–≤–∞–π –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–∫–ª—é—á–∞–π –ø—Ä–∏—á–∏–Ω—ã.\n"
        "–î–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã, –∫–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    ),
    "üáµüá± Polski": (
        "Jeste≈õ profesjonalnym diagnostƒÖ samochodowym.\n"
        "Twoim zadaniem jest pom√≥c u≈ºytkownikowi zidentyfikowaƒá awariƒô auta na podstawie jego opisu.\n"
        "Zadawaj pytania uzupe≈ÇniajƒÖce, wykluczaj mo≈ºliwe przyczyny, doradzaj co sprawdziƒá.\n"
        "Odpowiadaj po polsku."
    ),
    "üá¨üáß English": (
        "You are a professional car diagnostic assistant.\n"
        "Your goal is to help the user identify the car issue based on their description.\n"
        "Ask follow-up questions, rule out possible causes, suggest what to check.\n"
        "Respond in English."
    )
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞
async def handle_assistant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["awaiting_question"] = True
    context.user_data["assistant_history"] = []

    lang = context.user_data.get("lang", "üá∑üá∫ –†—É—Å—Å–∫–∏–π")
    intro = {
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º. –Ø –ø–æ–º–æ–≥—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.",
        "üáµüá± Polski": "‚úçÔ∏è Opisz problem z samochodem. Postaram siƒô pom√≥c.",
        "üá¨üáß English": "‚úçÔ∏è Describe your car issue. I will help you diagnose it."
    }.get(lang, "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.")

    await query.message.reply_text(intro)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE, openai_client, sheet_client=None, sheet_name=None):
    if not context.user_data.get("awaiting_question"):
        return

    user_input = update.message.text.strip()

    if user_input.lower() in ["—Å–±—Ä–æ—Å", "reset", "–Ω–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞", "–Ω–æ–≤–∞ –ø—Ä–æ–±–ª–µ–º–∞"]:
        context.user_data["assistant_history"] = []
        await update.message.reply_text("üîÅ –ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –û–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É.")
        return

    lang = context.user_data.get("lang", "üá∑üá∫ –†—É—Å—Å–∫–∏–π")
    system_prompt = assistant_system_prompts.get(lang, assistant_system_prompts["üá∑üá∫ –†—É—Å—Å–∫–∏–π"])

    history = context.user_data.get("assistant_history", [])

    messages = [
        {"role": "system", "content": system_prompt},
        *history,
        {"role": "user", "content": user_input}
    ]

    try:
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7
        )
        reply = response.choices[0].message.content

        history.append({"role": "user", "content": user_input})
        history.append({"role": "assistant", "content": reply})
        context.user_data["assistant_history"] = history

        await update.message.reply_text(reply, parse_mode="Markdown")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google –¢–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if sheet_client and sheet_name:
            try:
                sheet = sheet_client.open(sheet_name).worksheet("–î–∏–∞–ª–æ–≥–∏")
                sheet.append_row([
                    str(update.effective_user.id),
                    lang,
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    user_input,
                    reply
                ])
            except Exception as log_err:
                logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤ —Ç–∞–±–ª–∏—Ü—É: %s", log_err)

    except Exception as e:
        logging.error("OpenAI error: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")